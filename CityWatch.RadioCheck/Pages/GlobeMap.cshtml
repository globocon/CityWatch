@page
@model ErrorModel
@using CityWatch.Data.Helpers;
@using CityWatch.Data.Providers;
@using CityWatch.RadioCheck.Services;
@inject IViewDataService viewDataService
@inject IGuardLogDataProvider _guardLogDataProvider
@{
    ViewData["Title"] = "GlobeMap";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Globe Map</title>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/radiocheck.js" asp-append-version="true"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .dropdown-container {
            padding: 20px;
            background-color: #f8f9fa; /* Light gray background */
            border-bottom: 1px solid #ccc;
        }

            .dropdown-container select {
                padding: 10px;
                margin-right: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                font-size: 14px;
            }

        #map {
            height: 90vh; /* Occupies remaining viewport height */
        }

        #btnRefresh {
            margin-left: 10px;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            #btnRefresh:hover {
                background-color: #0056b3;
            }

        #btnRefreshActivityStatus {
            background-color: #008000;
            margin-left: 10px;
            padding: 5px 10px;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="dropdown-container">
        <!-- Dropdown 1 -->
        <select id="StateDrp">
            <option value="">Select State</option>
            <option value="VISY-VIC">VISY-VIC</option>
            <option value="VISY-NSW">VISY-NSW</option>
            <option value="VISY-QLD">VISY-QLD</option>
        </select>

        <!-- Dropdown 2 -->
        <select id="ClientType" style="width:153px">
            
            <option value="">Client Type</option>
            @{
                var userClientTypes = _guardLogDataProvider.GetUserClientTypesHavingAccess(AuthUserHelperRadio.LoggedInUserId);
                var sortedClientTypes = userClientTypes.OrderByDescending(clientType => viewDataService.GetClientTypeCount(clientType.Id));
                sortedClientTypes = userClientTypes.OrderBy(clientType => clientType.Name);
                foreach (var clientType in sortedClientTypes)
                {
                    var countClientType = viewDataService.GetClientTypeCount(clientType.Id);
                    <option value="@clientType.Id">@clientType.Name (@countClientType)</option>
                }
            }
        </select>
        <select id="ClientSiteId" style="width:153px"></select>
        <!-- Dropdown 3 -->
        <select id="dropdown3" onchange="onDropdownChange(3)">
            <option value="">ROMEO</option>
           
        </select>
        <button type="button" id="btnRefresh">Clear Filters</button>
        <div style="display:inline-block;float:right;margin-top:12px">
            Auto refresh in <span id="clockRefresh">03 min 00 sec</span>
            <button type="button" class="btn btn-sm btn-success" id="btnRefreshActivityStatus"><i class="fa fa-refresh" aria-hidden="true"></i> Refresh Now</button>

        </div>
    </div>
    <div id="map"></div>
    <script>
        window.onload = function () {
            if (document.querySelector('#clockRefresh')) {
                startClock();

            }

        };
        function startClock() {
            let timer = duration, minutes, seconds;
            display = document.querySelector('#clockRefresh');
            if (!nIntervId) {
                nIntervId = setInterval(function () {

                    if (!isPaused) {
                        minutes = parseInt(timer / 60, 10);
                        seconds = parseInt(timer % 60, 10);

                        minutes = minutes < 10 ? "0" + minutes : minutes;
                        seconds = seconds < 10 ? "0" + seconds : seconds;

                        display.textContent = minutes + " min" + " " + seconds + " sec";

                        if (--timer < 0) {
                            location.reload();

                        }

                    }
                }, 1000);
            }
        }
        $('#btnRefreshActivityStatus').on('click', function () {
            ClearTimerAndReload();
        });

        function ClearTimerAndReload() {
            clearInterval(nIntervId);
            DuressAlarmNotificationPending = false;
            nIntervId = null;
            location.reload();
        }
        setInterval(() => {
            location.reload();
        }, 180000);
        const urlParams = new URLSearchParams(window.location.search);
        const clientSiteIds = urlParams.get('clientSiteIds');

        const map = L.map('map').setView([-27.0, 133.0], 5); // Center on Australia
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors',
        }).addTo(map);

        fetch(`/RadioCheckV2?handler=ClientSiteActivityStatus&clientSiteIds=${clientSiteIds}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
        })
        .then(response => response.json())
        .then(data => {
            data.forEach(record => {
                const gps = record.gps ? record.gps.trim() : ''; 
                const address = record.address ? stripHtml(record.address).trim() : ''; 
                const GuardName = record.guardName;
                const siteNameParts = record.siteName.split('&nbsp;');
                const siteName = siteNameParts[0].trim();
                const phoneNumber = siteNameParts.slice(1).join('').trim();
                const alertColor = 'Green'; 
                const markerColor = getColorFromAlert(alertColor);

                if (gps) {
                    const [lat, lng] = gps.split(',').map(coord => parseFloat(coord));
                    L.marker([lat, lng], { icon: createCustomIcon(markerColor) })
                        .bindPopup(`<strong>SiteName:</strong> ${siteName} <br>
                                    <strong>Phone Number:</strong> ${phoneNumber} <br>
                                    <strong>Address:</strong> ${address} <br>
                                    <strong>GuardName:</strong> ${GuardName}`)
                        .addTo(map);
                }
            });
        })
        .catch(error => console.error('Error:', error));

        function stripHtml(input) {
            const doc = new DOMParser().parseFromString(input, 'text/html');
            return doc.body.textContent || "";
        }
        function getColorFromAlert(alert) {
            switch (alert) {
                case 'Red': return 'red';
                case 'Green': return 'green';
                case 'Yellow': return 'yellow';
                default: return 'grey';
            }
        }
        function createCustomIcon(color) {
            return L.divIcon({
                className: 'custom-marker',
                html: `<div style="background-color:${color}; width: 25px; height: 25px; border-radius: 50%;animation: blink 1s infinite;"></div>`,
                iconSize: [25, 25],
            });
        }
        $('#StateDrp').on('change', function () {
            $('#ClientType').val('');
            $('#ClientSiteId').empty();
            const selectedState = $(this).val(); // Get the selected state
            if (selectedState) {
                updateMap(selectedState);
            }
        });
        $('#ClientSiteId').on('change', function () {
          
            const selectedState = $(this).val(); // Get the selected state
            if (selectedState) {
                updateMapSite(selectedState);
            }
        });
        function updateMapSite(state) {
            fetch(`/RadioCheckV2?handler=ClientSiteActivityStatusClientSite&ClientSiteId=${state}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
            })
                .then(response => response.json())
                .then(data => {
                    clearMarkers();
                    data.forEach(record => {
                        const gps = record.gps ? record.gps.trim() : '';
                        const address = record.address ? stripHtml(record.address).trim() : '';
                        const GuardName = record.guardName;
                        const siteNameParts = record.siteName.split('&nbsp;');
                        const siteName = siteNameParts[0].trim();
                        const phoneNumber = siteNameParts.slice(1).join('').trim();
                        const alertColor = 'Green';
                        const markerColor = getColorFromAlert(alertColor);

                        if (gps) {
                            const [lat, lng] = gps.split(',').map(coord => parseFloat(coord));
                            L.marker([lat, lng], { icon: createCustomIcon(markerColor) })
                                .bindPopup(`<strong>SiteName:</strong> ${siteName} <br>
                                                    <strong>Phone Number:</strong> ${phoneNumber} <br>
                                                    <strong>Address:</strong> ${address} <br>
                                                    <strong>GuardName:</strong> ${GuardName}`)
                                .addTo(map);
                        }
                    });
                })
                .catch(error => console.error('Error:', error));
        }
        function updateMap(state) {
            fetch(`/RadioCheckV2?handler=ClientSiteActivityStatusState&state=${state}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
            })
                .then(response => response.json())
                .then(data => {
                    clearMarkers();
                    data.forEach(record => {
                        const gps = record.gps ? record.gps.trim() : '';
                        const address = record.address ? stripHtml(record.address).trim() : '';
                        const GuardName = record.guardName;
                        const siteNameParts = record.siteName.split('&nbsp;');
                        const siteName = siteNameParts[0].trim();
                        const phoneNumber = siteNameParts.slice(1).join('').trim();
                        const alertColor = 'Green';
                        const markerColor = getColorFromAlert(alertColor);

                        if (gps) {
                            const [lat, lng] = gps.split(',').map(coord => parseFloat(coord));
                            L.marker([lat, lng], { icon: createCustomIcon(markerColor) })
                                .bindPopup(`<strong>SiteName:</strong> ${siteName} <br>
                                            <strong>Phone Number:</strong> ${phoneNumber} <br>
                                            <strong>Address:</strong> ${address} <br>
                                            <strong>GuardName:</strong> ${GuardName}`)
                                .addTo(map);
                        }
                    });
                })
                .catch(error => console.error('Error:', error));
        }
        function clearMarkers() {
            map.eachLayer(function (layer) {
                if (layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });
        }
        $('#ClientType').on('change', function () {
            $('#ClientSiteId').empty();
            $('#StateDrp').val('');
            const clientTypeId = $(this).val();
           
            $.ajax({

                url: '/Admin/Settings?handler=ClientSitesNew&typeId=' + clientTypeId,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    $('#ClientSiteId').append(new Option('Select', '', true, true));
                    data.map(function (site) {
                        $('#ClientSiteId').append(new Option(site.name, site.id, false, false));
                    });


                }
            });


        });
        $('#btnRefresh').on('click', function () {
            location.reload();
        });
    </script>
</body>
</html>
