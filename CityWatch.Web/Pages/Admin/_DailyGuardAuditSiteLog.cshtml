@using CityWatch.Web.Helpers;
@using CityWatch.Data.Providers;
@using CityWatch.Web.Services;
@inject IViewDataService viewDataService
@inject IClientDataProvider clientDataProvider
@model CityWatch.Web.Pages.Admin.AuditSiteLogModel
<div class="row">
    <div class="col-md-12">
        <form method="post" class="border-bottom">
            <div class="form-row">
                <div class="form-group col-md-2">
                    <label class="mx-1" for="dglClientType">Client Type</label>
                    @if (Model.ClientTypeId != 0)
                                        {
                                            
                        <select class="form-control" id="dglClientType">
                            <option value="">Select</option>
                            @{
                                var userClientTypes = viewDataService.GetUserClientTypesHavingAccess(AuthUserHelper.LoggedInUserId).Where(x => x.Id == Model.ClientTypeId);
                                var sortedClientTypes = userClientTypes.OrderByDescending(clientType => viewDataService.GetClientTypeCount(clientType.Id));
                                sortedClientTypes = userClientTypes.OrderBy(clientType => clientType.Name);
                                foreach (var clientType in sortedClientTypes)
                                {
                                    var countClientType = viewDataService.GetClientTypeCount(clientType.Id);
                                    <option value="@clientType.Id" selected>@clientType.Name (@countClientType)</option>
                                }
                            }
                        </select>
                                        }
                                        @if (Model.ClientTypeId == 0)
                                        {
                    <select class="form-control" id="dglClientType">
                        <option value="">Select</option>
                        @{
                            var userClientTypes = viewDataService.GetUserClientTypesHavingAccess(AuthUserHelper.LoggedInUserId);
                            var sortedClientTypes = userClientTypes.OrderByDescending(clientType => viewDataService.GetClientTypeCount(clientType.Id));
                            sortedClientTypes = userClientTypes.OrderBy(clientType => clientType.Name);
                            foreach (var clientType in sortedClientTypes)
                            {
                                var countClientType = viewDataService.GetClientTypeCount(clientType.Id);
                                <option value="@clientType.Id">@clientType.Name (@countClientType)</option>
                            }
                        }
                    </select>
                                        }
                </div>
                <div class="form-group col-md-3">
                    <label class="mx-1" for="dglClientSiteId">Client Site</label>
                       @if (Model.ClientTypeId != 0)
                                        {
                    <select class="form-control mx-1" id="dglClientSiteId">
                            <option value="">Select</option>
                            
                            @{
                                var userClientSites = clientDataProvider.GetUserClientSiteAccess(AuthUserHelper.LoggedInUserId).Where(x=>x.ClientSite.TypeId==Model.ClientTypeId);
                              foreach (var clientSite in userClientSites)
                            {

                                    <option value="@clientSite.ClientSite.Id">@clientSite.ClientSite.Name </option>
                            }
                            }

                    </select>
                                        }
                                           @if (Model.ClientTypeId == 0)
                                        {
                        <select class="form-control mx-1" id="dglClientSiteId"></select>
                                        }
                    <div class="form-check mt-1">
                        <input type="checkbox" id="excludeSystemLog" class="form-check-input" />
                        <label for="excludeSystemLog" class="form-check-label">Exclude System Logs</label>
                    </div>
                </div>
                <div class="form-group col-md-2">
                    <label class="mx-1" for="dglAudtitFromDate">From Date</label>
                    <input type="date" class="form-control" id="dglAudtitFromDate" />
                </div>
                <div class="form-group col-md-2">
                    <label class="mx-1" for="dglAudtitToDate">To Date</label>
                    <input type="hidden" id="dglAudtitToDateVal" name="dglAudtitToDateVal" value='@DateTime.Today.ToString("yyyy-MM-dd")'>
                    <input type="date" class="form-control" id="dglAudtitToDate">
                </div>
                <div class="form-group col-md-3">
                    <label class="mx-1">&nbsp;</label>
                    <div>
                        <button type="button" class="btn btn-primary mx-1" id="btnGenerateDglAuditReport">View Report</button>
                        <button type="button" class="btn btn-primary" id="btnDownloadDglAuditZip">Download Zip</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="my-2">
            <button type="button" id="expand_dgl_audits" class="btn btn-light">Expand All</button>
            <button type="button" id="collapse_dgl_audits" class="btn btn-light">Collapse All</button>
        </div>
        <table class="table" id="dgl_site_log"></table>
    </div>
</div>